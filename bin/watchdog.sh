#!/usr/bin/env bash

set -eo pipefail

echo "Starting juice4halt watchdog..."

# remove any triggers from previous shutdowns
rm -f /home/pi/juice4halt/.triggered-shutdown
 
# use GPIO25 as an open-drain output, send a short LOW pulse
# to signal booting has finished and preps J4H for auto shutdown
pinctrl 25 op dl
sleep 0.2s
# set as input to listen to J4H
pinctrl 25 ip
 
# give pin time to rise to HI
sleep 0.2s

# initial read
if [[ "$(pinctrl 25)" == *"lo"* ]]; then state="lo"; else state="hi"; fi;

# if a LOW is sent from the J4H then start with the shutdown
# to be resistant to short pulses (e.g. 100ms pulse generated by the rebootj4h script) two readings 200 ms
# apart from each other are required
 
while [ "$state" ==  "hi" ]
do
        # check pin and set state accordingly
        if [[ "$(pinctrl 25)" == *"lo"* ]]; then state="lo"; else state="hi"; fi;
       
        #wait
        sleep 0.2s
 
	# check pin 200 ms later and set state accordingly
        if [[ "$(pinctrl 25)" == *"lo"* ]]; then state="lo"; else state="hi"; fi;

done

# set GPIO25 as output and set output to LOW
pinctrl 25 op dl
 
# wait for system halt
# after system halted (below) the pin will be automatically switched to input and the level will be pulled up to HI
# a LOW to HI transition signals to the J4H to turn the power off

# set a flag file so that the safe-shutdown script does not communicate over GPIO
touch /home/pi/juice4halt/.triggered-shutdown

echo ""
echo "Juice4halt: Power failure, RPi will now shut down."
sudo halt
